import java.util.Scanner;

public class java {

    public void one {


        //Примитивные типы данных
        byte b = 100;
        short s = 10000;
        int i = 100000;
        long l = 100000L;

        //Числа с плавающей точкой
        float f = 10.5f;
        double d = 10.555;

        //Символы
        char c = 'A';

        //Логические значения
        //boolean: Может принимать только два значения: true или false
        boolean isJavaFun = true;
        boolean isFishTasty = false;


        //Строки(String) в Java. Действия со строками
        String text1 = "Hello World";

        //Основные операции со строками
        //Конкатенация строк:
        //Конкатенация строк осуществляется с помощью оператора + или метода concat().
        String greeting = "Hello, " + "World!";
        String greeting2 = "Hello, ".concat("World!");

        //Извлечение подстроки
        //Метод substring() позволяет извлечь подстроку из строки.
        String text = "Hello, World!";
        String subText = text.substring(7, 12); // "World"

        //Сравнение строк:
        //Для сравнения строк используется метод equals()
        String str1 = "Hello";
        String str2 = "Hello";
        boolean isEqual = str1.equals(str2); // true

        //Длина строки:
        //Метод length() возвращает длину строки.
        String text = "Hello, World!";
        int length = text.length(); // 13

        //Проверка на пустоту:
        //Метод isEmpty() проверяет, является ли строка пустой.
        String text = "";
        boolean isEmpty = text.isEmpty(); // true


        //Ссылочные типы данных в Java
        //В Java, помимо примитивных типов данных, существуют ссылочные типы данных.
        //Ссылочные типы данных включают в себя классы, интерфейсы и массивы.
        //Переменные ссылочного типа содержат ссылки на объекты в памяти, а не сами объекты.

        //В этом примере переменная text содержит ссылку на объект строки в памяти:
        String text = "Hello, World!";

        //Примеры использования ссылочных типов данных
        //Классы и объекты:
        //Классы определяют шаблоны для объектов, а объекты являются экземплярами классов:

        class Person {
            String name;
            int age;

            Person(String name, int age) {
                this.name = name;
                this.age = age;
            }
        }
        Person person = new Person("Alice", 30);

        //Массивы:
        //Массивы в Java также являются ссылочными типами данных.
        int[] numbers = {1, 2, 3, 4, 5};
    }








    public void two {

    //Цикл while в Java
    //Цикл while в Java используется для выполнения блока кода до тех пор, пока заданное условие истинно.
    //Это полезно, когда количество итераций заранее неизвестно и зависит от выполнения определенного условия.
    //Синтаксис цикла while
    //Синтаксис цикла while выглядит следующим образом:

    //while (условие) {
            // тело цикла
    }
    //Пример:
    public class Main {
        public static void main(String[] args) {
            int i = 1;
            while (i <= 5) {
                System.out.println(i);
                i++;
            }
        }
    }
//В этом примере переменная i инициализируется значением 1.
//Цикл while продолжает выполняться до тех пор, пока значение i меньше или равно 5.
//В каждой итерации значение i увеличивается на 1.

//Особенности цикла while
//Условие проверки: Условие проверяется перед каждой итерацией цикла.
//Если условие ложно с самого начала, тело цикла не выполнится ни разу.
//Неопределенное количество итераций: Цикл while часто используется, когда количество итераций заранее неизвестно и зависит от выполнения определенного условия.

//Пример с пользовательским вводом
//Рассмотрим пример, где цикл while используется для запроса пользовательского ввода
//до тех пор, пока пользователь не введет определенное значение:
import java.util.Scanner;

public class Main {

     public static void main(String[] args) {
         Scanner scanner = new Scanner(System.in);
         String input = "";

         while (!input.equals("exit")) {
           System.out.print("Введите команду (для выхода введите 'exit'): ");
           input = scanner.nextLine();
           System.out.println("Вы ввели: " + input);
           }

            System.out.println("Программа завершена.");
        }
    }
//В этом примере программа будет запрашивать ввод пользователя до тех пор, пока не будет введено слово "exit".
}






                                    //Цикл for

//for (инициализация; условие; инкремент/декремент) {
        // тело цикла}
//Инициализация: Выполняется один раз перед началом цикла.
//Условие: Проверяется перед каждой итерацией цикла. Если условие истинно, выполняется тело цикла.
//Инкремент/декремент: Выполняется после каждой итерации цикла.

//Рассмотрим простой пример, где цикл for используется для вывода чисел от 1 до 5:
public class Main {
    public static void main(String[] args) {
        for (int i = 1; i <= 5; i++) {
            System.out.println(i);
        }
    }
}
//В этом примере переменная i инициализируется значением 1.
//Цикл for продолжает выполняться до тех пор, пока значение i меньше или равно 5.
//В каждой итерации значение i увеличивается на 1.

//Пример с массивом
public class Main {
    public static void main(String[] args) {
        int[] numbers = {1, 2, 3, 4, 5};

        for (int i = 0; i < numbers.length; i++) {
            System.out.println(numbers[i]);
        }
    }
}



                                //Условный оператор if

//Условный оператор if в Java используется для выполнения блока кода,
//если заданное условие истинно


//Синтаксис оператора if выглядит следующим образом:
//if (условие) {
//    // блок кода, который выполнится, если условие истинно
//}


//Пример, где оператор if используется для проверки, является ли число положительным:
public class Main {
    public static void main(String[] args) {
        int number = 10;

        if (number > 0) {
            System.out.println("Число положительное.");
        }
    }
}
//В этом примере условие number > 0 проверяется, и если оно истинно,
//выполняется блок кода внутри оператора if, выводя сообщение "Число положительное."

//Оператор if-else
//Оператор if-else позволяет выполнять один блок кода, если условие истинно, и другой блок кода, если условие ложно.
//Синтаксис оператора if-else:
//if (условие) {
//    // блок кода, который выполнится, если условие истинно
//} else {
//    // блок кода, который выполнится, если условие ложно
//}

//Пример использования оператора if-else:
public class Main {
    public static void main(String[] args) {
        int number = -10;

        if (number > 0) {
            System.out.println("Число положительное.");
        } else {
            System.out.println("Число отрицательное или равно нулю.");
        }
    }
}
//В этом примере, если условие number > 0 ложно, выполняется блок кода внутри оператора else,
//выводя сообщение "Число отрицательное или равно нулю."

//Оператор if-else-if
//Оператор if-else-if используется для проверки нескольких условий последовательно.
//Он позволяет выполнять разные блоки кода в зависимости от того, какое из условий истинно.
//Синтаксис оператора if-else-if:
//if (условие1) {
//    // блок кода, который выполнится, если условие1 истинно
//} else if (условие2) {
//    // блок кода, который выполнится, если условие2 истинно
//} else {
//    // блок кода, который выполнится, если все условия ложны
//}

//Пример использования оператора if-else-if:
public class Main {
    public static void main(String[] args) {
        int number = 0;

        if (number > 0) {
            System.out.println("Число положительное.");
        } else if (number < 0) {
            System.out.println("Число отрицательное.");
        } else {
            System.out.println("Число равно нулю.");
        }
    }
}





                                //Ввод данных. Класс Scanner в Java


}
